#include <iostream>
#include <GL/gl.h>
#include <GL/freeglut.h>

using namespace std;

#define sign(x) ((x > 0) ? 1 : ((x < 0) ? -1 : 0))

void setPixel(GLint x, GLint y)
{
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void bresenham(float x1, float y1, float x2, float y2, int line_type)
{
  float dx, dy, x, y, d, s1, s2, swap = 0, temp;
  dx = abs(x2 - x1);
  dy = abs(y2 - y1);
  s1 = sign(x2 - x1);
  s2 = sign(y2 - y1);
  if (dy > dx)
  {
    temp = dx;
    dx = dy;
    dy = temp;
    swap = 1;
  }

  d = 2 * dy - dx;
  x = x1;
  y = y1;
  setPixel(x, y);

  int i;
  for (i = 1; i <= dx; i++)
  {
    while (d >= 0)
    {
      if (swap)
        x = x + s1;
      else
      {
        y = y + s2;
        d = d - 2 * dx;
      }
    }
    if (swap)
      y = y + s2;
    else
      x = x + s1;
    d = d + 2 * dy;

    switch (line_type)
    {
    case 1:
      glPointSize(1);
      setPixel(x, y);
      break;
    case 2:
      glPointSize(3);
      setPixel(x, y);
      break;
    case 3:
      if ((int)x % 4 == 0)
      {
        glPointSize(1);
        setPixel(x, y);
      }
    }
  }
  glFlush();
}



void bresenham_circle()
{
    int p , q;
    cout<<"Enter center x:"; cin>>p;
    cout<<"Enter center y:"; cin>>q;
    cout<<"Enter radius : ";
    int rad ; cin>>rad;
    int x=0, y=rad;
    int d = 3-(2*rad);

    while(x<=y){
        setPixel(p+x,q+y);
        setPixel(p+y,q+x);
        setPixel(p+x,q-y);
        setPixel(p-y,q+x);
        setPixel(p-x,q-y);
        setPixel(p-y,q-x);
        setPixel(p-x,q+y);
        setPixel(p+y,q-x);
        if(d<=0){
            d += ((4*x)+6);
        }
        else{
            y--;
            d += (4*(x-y)+10);
        }
        x++;
    }
    glFlush();
}

void draw()
{
    glClear(GL_COLOR_BUFFER_BIT);
 
    bresenham(0, 250, 500, 250, 1);
    bresenham(250, 0, 250, 500, 1);

    bresenham_circle();
    int x1,y1,x2,y2;
    while(1){
        cin>>x1>>y1>>x2>>y2;
        bresenham(x1,y1,x2,y2,1);
    }
    glFlush();
}

void init()
{
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Green Window");
    glClearColor(0.0, 0.0, 0.0, 0);
    glColor3f(1.0, 1.0, 1.0);
    gluOrtho2D(0, 500, 0, 500);
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);

    init();

    glutDisplayFunc(draw);
    glutMainLoop();
    return 0;
}

